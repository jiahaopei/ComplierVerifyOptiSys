预处理源代码开始...(test1.c)
预处理源代码结束
词法分析开始...
词法分析结束!
====================Source C Code==================
#include <stdio.h>                                

int main() {                                      
    int n;                                        
    int i;                                        
    int sum;                                      
    int tmp;                                      
    double a, b;                                  
    char c, d;                                    


    scanf("%d %f %f", &n, &a, &b);                
    sum = 0;                                      

    for(i = 1; i <= n; i++) {                     
        tmp = i % 2;                              
        if(tmp == 0) {                            
            sum = sum + i;                        
        } else {                                  
            sum = sum - i * 2;                    
        
        }                                         
    }                                             

    printf("sum is %d", sum);                     

    return 0;                                     
}                                                 

====================Labeled C Code==================
#include <stdio.h>                                // 1

int main() {                                      // 2
    int n;                                        // 2.1
    int i;                                        // 2.2
    int sum;                                      // 2.3
    int tmp;                                      // 2.4
    double a, b;                                  // 2.5
    char c, d;                                    // 2.6


    scanf("%d %f %f", &n, &a, &b);                // 2.7
    sum = 0;                                      // 2.8

    for(i = 1; i <= n; i++) {                     // 2.9
        tmp = i % 2;                              // 2.9.1
        if(tmp == 0) {                            // 2.9.2
            sum = sum + i;                        // 2.9.2.1
        } else {                                  // 2.9.3
            sum = sum - i * 2;                    // 2.9.3.1
        
        }                                         // 2.9.4
    }                                             // 2.10

    printf("sum is %d", sum);                     // 2.11

    return 0;                                     // 2.12
}                                                 // 3

====================Lexer==================
(#, SHARP, 1)
(include, INCLUDE, 1)
(<, LT, 1)
(stdio.h, IDENTIFIER, 1)
(>, GT, 1)
(int, INT, 2)
(main, IDENTIFIER, 2)
((, LL_BRACKET, 2)
(), RL_BRACKET, 2)
({, LB_BRACKET, 2)
(int, INT, 2.1)
(n, IDENTIFIER, 2.1)
(;, SEMICOLON, 2.1)
(int, INT, 2.2)
(i, IDENTIFIER, 2.2)
(;, SEMICOLON, 2.2)
(int, INT, 2.3)
(sum, IDENTIFIER, 2.3)
(;, SEMICOLON, 2.3)
(int, INT, 2.4)
(tmp, IDENTIFIER, 2.4)
(;, SEMICOLON, 2.4)
(double, DOUBLE, 2.5)
(a, IDENTIFIER, 2.5)
(,, COMMA, 2.5)
(b, IDENTIFIER, 2.5)
(;, SEMICOLON, 2.5)
(char, CHAR, 2.6)
(c, IDENTIFIER, 2.6)
(,, COMMA, 2.6)
(d, IDENTIFIER, 2.6)
(;, SEMICOLON, 2.6)
(scanf, IDENTIFIER, 2.7)
((, LL_BRACKET, 2.7)
(", DOUBLE_QUOTE, 2.7)
(%d %f %f, STRING_CONSTANT, 2.7)
(", DOUBLE_QUOTE, 2.7)
(,, COMMA, 2.7)
(&, BIT_AND, 2.7)
(n, IDENTIFIER, 2.7)
(,, COMMA, 2.7)
(&, BIT_AND, 2.7)
(a, IDENTIFIER, 2.7)
(,, COMMA, 2.7)
(&, BIT_AND, 2.7)
(b, IDENTIFIER, 2.7)
(), RL_BRACKET, 2.7)
(;, SEMICOLON, 2.7)
(sum, IDENTIFIER, 2.8)
(=, ASSIGN, 2.8)
(0, DIGIT_CONSTANT, 2.8)
(;, SEMICOLON, 2.8)
(for, FOR, 2.9)
((, LL_BRACKET, 2.9)
(i, IDENTIFIER, 2.9)
(=, ASSIGN, 2.9)
(1, DIGIT_CONSTANT, 2.9)
(;, SEMICOLON, 2.9)
(i, IDENTIFIER, 2.9)
(<=, LET, 2.9)
(n, IDENTIFIER, 2.9)
(;, SEMICOLON, 2.9)
(i, IDENTIFIER, 2.9)
(++, SELF_PLUS, 2.9)
(), RL_BRACKET, 2.9)
({, LB_BRACKET, 2.9)
(tmp, IDENTIFIER, 2.9.1)
(=, ASSIGN, 2.9.1)
(i, IDENTIFIER, 2.9.1)
(%, MOD, 2.9.1)
(2, DIGIT_CONSTANT, 2.9.1)
(;, SEMICOLON, 2.9.1)
(if, IF, 2.9.2)
((, LL_BRACKET, 2.9.2)
(tmp, IDENTIFIER, 2.9.2)
(==, EQU, 2.9.2)
(0, DIGIT_CONSTANT, 2.9.2)
(), RL_BRACKET, 2.9.2)
({, LB_BRACKET, 2.9.2)
(sum, IDENTIFIER, 2.9.2.1)
(=, ASSIGN, 2.9.2.1)
(sum, IDENTIFIER, 2.9.2.1)
(+, PLUS, 2.9.2.1)
(i, IDENTIFIER, 2.9.2.1)
(;, SEMICOLON, 2.9.2.1)
(}, RB_BRACKET, 2.9.3)
(else, ELSE, 2.9.3)
({, LB_BRACKET, 2.9.3)
(sum, IDENTIFIER, 2.9.3.1)
(=, ASSIGN, 2.9.3.1)
(sum, IDENTIFIER, 2.9.3.1)
(-, MINUS, 2.9.3.1)
(i, IDENTIFIER, 2.9.3.1)
(*, MUL, 2.9.3.1)
(2, DIGIT_CONSTANT, 2.9.3.1)
(;, SEMICOLON, 2.9.3.1)
(}, RB_BRACKET, 2.9.4)
(}, RB_BRACKET, 2.10)
(printf, IDENTIFIER, 2.11)
((, LL_BRACKET, 2.11)
(", DOUBLE_QUOTE, 2.11)
(sum is %d, STRING_CONSTANT, 2.11)
(", DOUBLE_QUOTE, 2.11)
(,, COMMA, 2.11)
(sum, IDENTIFIER, 2.11)
(), RL_BRACKET, 2.11)
(;, SEMICOLON, 2.11)
(return, RETURN, 2.12)
(0, DIGIT_CONSTANT, 2.12)
(;, SEMICOLON, 2.12)
(}, RB_BRACKET, 3)

文法单元识别开始...
  include语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  if-else语句 : 语法合法
  for语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  main函数定义 : 语法合法
文法单元识别结束!
====================Recognizer==================
( self: Sentence null null, father: null, left: null, right: null )
( self: Include null null, father: Sentence, left: null, right: FunctionStatement )
( self: # SHARP 1_in, father: Include, left: null, right: include )
( self: include INCLUDE 1_in, father: Include, left: #, right: < )
( self: < LT 1_in, father: Include, left: include, right: stdio.h )
( self: stdio.h IDENTIFIER 1_in, father: Include, left: <, right: > )
( self: > GT 1_in, father: Include, left: stdio.h, right: null )
( self: FunctionStatement null null, father: Sentence, left: Include, right: null )
( self: Type null null, father: FunctionStatement, left: null, right: FunctionName )
( self: int FIELD_TYPE 2_fs, father: Type, left: null, right: null )
( self: FunctionName null null, father: FunctionStatement, left: Type, right: FunctionParameterList )
( self: main IDENTIFIER 2_fs, father: FunctionName, left: null, right: null )
( self: FunctionParameterList null null, father: FunctionStatement, left: FunctionName, right: Sentence )
( self: Sentence null null, father: FunctionStatement, left: FunctionParameterList, right: null )
( self: Statement null null, father: Sentence, left: null, right: Statement )
( self: Type null null, father: Statement, left: null, right: n )
( self: int FIELD_TYPE 2.1_st, father: Type, left: null, right: null )
( self: n IDENTIFIER 2.1_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: i )
( self: int FIELD_TYPE 2.2_st, father: Type, left: null, right: null )
( self: i IDENTIFIER 2.2_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: sum )
( self: int FIELD_TYPE 2.3_st, father: Type, left: null, right: null )
( self: sum IDENTIFIER 2.3_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: tmp )
( self: int FIELD_TYPE 2.4_st, father: Type, left: null, right: null )
( self: tmp IDENTIFIER 2.4_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: a )
( self: double FIELD_TYPE 2.5_st, father: Type, left: null, right: null )
( self: a IDENTIFIER 2.5_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: b )
( self: double FIELD_TYPE null, father: Type, left: null, right: null )
( self: b IDENTIFIER 2.5_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: c )
( self: char FIELD_TYPE 2.6_st, father: Type, left: null, right: null )
( self: c IDENTIFIER 2.6_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Assignment )
( self: Type null null, father: Statement, left: null, right: d )
( self: char FIELD_TYPE null, father: Type, left: null, right: null )
( self: d IDENTIFIER 2.6_st, father: Statement, left: Type, right: null )
( self: Assignment null null, father: Sentence, left: Statement, right: Control )
( self: sum IDENTIFIER 2.8_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 2.8_ex, father: Expression, left: null, right: null )
( self: Control ForControl 2.9_fo, father: Sentence, left: Assignment, right: Return )
( self: Assignment null null, father: Control, left: null, right: Expression )
( self: i IDENTIFIER 2.9_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: i, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 1 _Constant 2.9_ex, father: Expression, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: Control, left: Assignment, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: i _Variable 2.9_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: n _Variable 2.9_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: <= _Operator 2.9_ex, father: Operator, left: null, right: null )
( self: Sentence null null, father: Control, left: Expression, right: Expression )
( self: Assignment null null, father: Sentence, left: null, right: Control )
( self: tmp IDENTIFIER 2.9.1_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: tmp, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: i _Variable 2.9.1_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 2.9.1_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: % _Operator 2.9.1_ex, father: Operator, left: null, right: null )
( self: Control IfElseControl null, father: Sentence, left: Assignment, right: null )
( self: IfControl null 2.9.2_if, father: Control, left: null, right: ElseControl )
( self: Expression SingleOrDoubleOperand null, father: IfControl, left: null, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: tmp _Variable 2.9.2_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 0 _Constant 2.9.2_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: == _Operator 2.9.2_ex, father: Operator, left: null, right: null )
( self: Sentence null null, father: IfControl, left: Expression, right: null )
( self: Assignment null null, father: Sentence, left: null, right: null )
( self: sum IDENTIFIER 2.9.2.1_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: sum _Variable 2.9.2.1_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: i _Variable 2.9.2.1_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: + _Operator 2.9.2.1_ex, father: Operator, left: null, right: null )
( self: ElseControl null 2.9.3_el, father: Control, left: IfControl, right: null )
( self: Sentence null null, father: ElseControl, left: null, right: null )
( self: Assignment null null, father: Sentence, left: null, right: null )
( self: sum IDENTIFIER 2.9.3.1_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: sum _Variable 2.9.3.1_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Expression )
( self: i _Variable 2.9.3.1_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 2.9.3.1_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: Operator )
( self: * _Operator 2.9.3.1_ex, father: Operator, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Operator, right: null )
( self: - _Operator 2.9.3.1_ex, father: Operator, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: Control, left: Sentence, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Operator )
( self: i _Variable 2.9_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: ++ _Operator 2.9_ex, father: Operator, left: null, right: null )
( self: Return null null, father: Sentence, left: Control, right: null )
( self: return RETURN 2.12_re, father: Return, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Return, left: return, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 2.12_ex, father: Expression, left: null, right: null )

文法单元识别开始...
  include语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  if-else语句 : 语法合法
  for语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  main函数定义 : 语法合法
文法单元识别结束!
====================Recognizer==================
( self: Sentence null null, father: null, left: null, right: null )
( self: Include null null, father: Sentence, left: null, right: FunctionStatement )
( self: # SHARP 1_in, father: Include, left: null, right: include )
( self: include INCLUDE 1_in, father: Include, left: #, right: < )
( self: < LT 1_in, father: Include, left: include, right: stdio.h )
( self: stdio.h IDENTIFIER 1_in, father: Include, left: <, right: > )
( self: > GT 1_in, father: Include, left: stdio.h, right: null )
( self: FunctionStatement null null, father: Sentence, left: Include, right: null )
( self: Type null null, father: FunctionStatement, left: null, right: FunctionName )
( self: int FIELD_TYPE 2_fs, father: Type, left: null, right: null )
( self: FunctionName null null, father: FunctionStatement, left: Type, right: FunctionParameterList )
( self: main IDENTIFIER 2_fs, father: FunctionName, left: null, right: null )
( self: FunctionParameterList null null, father: FunctionStatement, left: FunctionName, right: Sentence )
( self: Sentence null null, father: FunctionStatement, left: FunctionParameterList, right: null )
( self: Statement null null, father: Sentence, left: null, right: Statement )
( self: Type null null, father: Statement, left: null, right: n )
( self: int FIELD_TYPE 2.1_st, father: Type, left: null, right: null )
( self: n IDENTIFIER 2.1_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: i )
( self: int FIELD_TYPE 2.2_st, father: Type, left: null, right: null )
( self: i IDENTIFIER 2.2_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: sum )
( self: int FIELD_TYPE 2.3_st, father: Type, left: null, right: null )
( self: sum IDENTIFIER 2.3_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: tmp )
( self: int FIELD_TYPE 2.4_st, father: Type, left: null, right: null )
( self: tmp IDENTIFIER 2.4_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: a )
( self: double FIELD_TYPE 2.5_st, father: Type, left: null, right: null )
( self: a IDENTIFIER 2.5_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: b )
( self: double FIELD_TYPE null, father: Type, left: null, right: null )
( self: b IDENTIFIER 2.5_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: c )
( self: char FIELD_TYPE 2.6_st, father: Type, left: null, right: null )
( self: c IDENTIFIER 2.6_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Assignment )
( self: Type null null, father: Statement, left: null, right: d )
( self: char FIELD_TYPE null, father: Type, left: null, right: null )
( self: d IDENTIFIER 2.6_st, father: Statement, left: Type, right: null )
( self: Assignment null null, father: Sentence, left: Statement, right: Control )
( self: sum IDENTIFIER 2.8_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 2.8_ex, father: Expression, left: null, right: null )
( self: Control ForControl 2.9_fo, father: Sentence, left: Assignment, right: Return )
( self: Assignment null null, father: Control, left: null, right: Expression )
( self: i IDENTIFIER 2.9_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: i, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 1 _Constant 2.9_ex, father: Expression, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: Control, left: Assignment, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: i _Variable 2.9_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: n _Variable 2.9_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: <= _Operator 2.9_ex, father: Operator, left: null, right: null )
( self: Sentence null null, father: Control, left: Expression, right: Expression )
( self: Assignment null null, father: Sentence, left: null, right: Control )
( self: tmp IDENTIFIER 2.9.1_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: tmp, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: i _Variable 2.9.1_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 2.9.1_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: % _Operator 2.9.1_ex, father: Operator, left: null, right: null )
( self: Control IfElseControl null, father: Sentence, left: Assignment, right: null )
( self: IfControl null 2.9.2_if, father: Control, left: null, right: ElseControl )
( self: Expression SingleOrDoubleOperand null, father: IfControl, left: null, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: tmp _Variable 2.9.2_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 0 _Constant 2.9.2_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: == _Operator 2.9.2_ex, father: Operator, left: null, right: null )
( self: Sentence null null, father: IfControl, left: Expression, right: null )
( self: Assignment null null, father: Sentence, left: null, right: null )
( self: sum IDENTIFIER 2.9.2.1_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: sum _Variable 2.9.2.1_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: i _Variable 2.9.2.1_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: + _Operator 2.9.2.1_ex, father: Operator, left: null, right: null )
( self: ElseControl null 2.9.3_el, father: Control, left: IfControl, right: null )
( self: Sentence null null, father: ElseControl, left: null, right: null )
( self: Assignment null null, father: Sentence, left: null, right: null )
( self: sum IDENTIFIER 2.9.3.1_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: sum _Variable 2.9.3.1_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Expression )
( self: i _Variable 2.9.3.1_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 2.9.3.1_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: Operator )
( self: * _Operator 2.9.3.1_ex, father: Operator, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Operator, right: null )
( self: - _Operator 2.9.3.1_ex, father: Operator, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: Control, left: Sentence, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Operator )
( self: i _Variable 2.9_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: ++ _Operator 2.9_ex, father: Operator, left: null, right: null )
( self: Return null null, father: Sentence, left: Control, right: null )
( self: return RETURN 2.12_re, father: Return, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Return, left: return, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 2.12_ex, father: Expression, left: null, right: null )

目标码生成开始...
assignment : 2.8_as
	Semantic verify correct

assignment : 2.9_as
	Semantic verify correct

expression : 2.9.1_ex
	Semantic verify correct

assignment : 2.9.1_as
	Semantic verify correct

expression : 2.9.2_ex
	Semantic verify correct

expression : 2.9.2.1_ex
	Semantic verify correct

assignment : 2.9.2.1_as
	Semantic verify correct

expression : 2.9.3.1_ex
	Semantic verify correct

assignment : 2.9.3.1_as
	Semantic verify correct

if-else语句验证开始...
if_else : 2.9.2_if, 2.9.3_el

==============目标码模式===============

==============目标码模式命题===============

==============推导序列===============
S1 = 		, CI
S2 = 		S1, REDUCE
S3 = 		S2, σ

=============给定的目标语义================

===============结论================
给定的目标语义和推理出的语义是否一致 : 
true
if-else语句验证结果 : 验证成功
if-else语句验证结束!

expression : 2.9_ex
	Semantic verify correct

expression : 2.9_ex
	Semantic verify correct

for语句验证开始...
for : 2.9_fo

==============目标码模式===============

==============目标码模式命题===============

=================循环交互证明算法===================
用户输入的语义 :

辅助前提 :
P0 = 

推导序列 :
S1 = 		, CI
S2 = 		S1, REDUCE
S3 = 		S2, σ
S4 = 		P0, n = N
S5 = 		S3, S4, CI

check(n == 1) :
目标语义 : 
推导序列证据 : S3
目标语义和推理出的语义是否一致 : true

check(n == N + 1) :
目标语义 : 
推导序列证据 : S5
目标语义和推理出的语义是否一致 : true

综上，给定的目标语义和推理出的语义是否一致 :
true
for语句验证结果 : 验证成功
for语句验证结束!

return : 2.12_re
	Semantic verify correct

functionStatement : 2_fs
	Semantic verify correct

目标码生成结束!
===================Assembler==================

	.section .rodata

	.section ".text"
	.align 2                                         # 2_fs
	.globl main                                      # 2_fs
	.type main, @function                            # 2_fs
main:	                                            # 2_fs
	stwu 1,-32(1)                                    # 2_fs
	mflr 0                                           # 2_fs
	stw 31,28(1)                                     # 2_fs
	stw 0,36(1)                                      # 2_fs
	mr 31,1                                          # 2_fs

	li 0,0                                           # 2.8_as
	stw 0,16(31)                                     # 2.8_as

	li 0,1                                           # 2.9_as
	stw 0,12(31)                                     # 2.9_as

	b .L0                                            # 2.9_fo
.L1:	                                             # 2.9_fo
	lwz 0,12(31)                                     # 2.9.1_ex
	li 9,2                                           # 2.9.1_ex
	divw 11,0,9                                      # 2.9.1_ex
	mullw 9,11,9                                     # 2.9.1_ex
	subf 0,9,0                                       # 2.9.1_ex
	stw 0,36(31)                                     # 2.9.1_ex

	lwz 0,36(31)                                     # 2.9.1_as
	stw 0,20(31)                                     # 2.9.1_as

	lwz 0,20(31)                                     # 2.9.2_ex
	li 9,0                                           # 2.9.2_ex
	cmp 7,0,0,9                                      # 2.9.2_ex
	li 0,0                                           # 2.9.2_ex
	li 9,1                                           # 2.9.2_ex
	isel 0,9,0,30                                    # 2.9.2_ex
	stw 0,36(31)                                     # 2.9.2_ex

	lwz 0,36(31)                                     # 2.9.2_if
	cmpi 7,0,0,0                                     # 2.9.2_if
	beq 7,.L2                                        # 2.9.2_if

	lwz 9,16(31)                                     # 2.9.2.1_ex
	lwz 0,12(31)                                     # 2.9.2.1_ex
	add 0,9,0                                        # 2.9.2.1_ex
	stw 0,36(31)                                     # 2.9.2.1_ex

	lwz 0,36(31)                                     # 2.9.2.1_as
	stw 0,16(31)                                     # 2.9.2.1_as

	b .L3                                            # 2.9.3_el
.L2:	                                             # 2.9.2_if

	lwz 9,12(31)                                     # 2.9.3.1_ex
	li 0,2                                           # 2.9.3.1_ex
	mullw 0,9,0                                      # 2.9.3.1_ex
	stw 0,36(31)                                     # 2.9.3.1_ex

	lwz 9,16(31)                                     # 2.9.3.1_ex
	lwz 0,36(31)                                     # 2.9.3.1_ex
	subf 0,9,0                                       # 2.9.3.1_ex
	stw 0,40(31)                                     # 2.9.3.1_ex

	lwz 0,40(31)                                     # 2.9.3.1_as
	stw 0,16(31)                                     # 2.9.3.1_as

.L3:	                                             # 2.9.3_el

	lwz 0,12(31)                                     # 2.9_ex
	addic 0,0,1                                      # 2.9_ex
	stw 0,12(31)                                     # 2.9_ex

.L0:	                                             # 2.9_fo
	lwz 0,12(31)                                     # 2.9_ex
	lwz 9,8(31)                                      # 2.9_ex
	cmp 7,0,0,9                                      # 2.9_ex
	li 0,1                                           # 2.9_ex
	isel 0,0,0,29                                    # 2.9_ex
	stw 0,36(31)                                     # 2.9_ex

	lwz 0,36(31)                                     # 2.9_fo
	cmpi 7,0,0,0                                     # 2.9_fo
	bne 7,.L1                                        # 2.9_fo

	li 0,0                                           # 2.12_re
	mr 3,0                                           # 2.12_re
	lwz 11,0(1)                                      # 2_fs
	lwz 0,4(11)                                      # 2_fs
	mtlr 0                                           # 2_fs
	lwz 31,-4(11)                                    # 2_fs
	mr 1,11                                          # 2_fs
	blr                                              # 2_fs
	.size main,.-main                                # 2_fs
目标码生成开始...
assignment : 2.8_as
	Semantic verify correct

assignment : 2.9_as
	Semantic verify correct

expression : 2.9.1_ex
	Semantic verify correct

assignment : 2.9.1_as
	Semantic verify correct

expression : 2.9.2_ex
	Semantic verify correct

expression : 2.9.2.1_ex
	Semantic verify correct

assignment : 2.9.2.1_as
	Semantic verify correct

expression : 2.9.3.1_ex
	Semantic verify correct

assignment : 2.9.3.1_as
	Semantic verify correct

if-else语句验证开始...
if_else : 2.9.2_if, 2.9.3_el

==============目标码模式===============

==============目标码模式命题===============

==============推导序列===============
S1 = 		, CI
S2 = 		S1, REDUCE
S3 = 		S2, σ

=============给定的目标语义================

===============结论================
给定的目标语义和推理出的语义是否一致 : 
true
if-else语句验证结果 : 验证成功
if-else语句验证结束!

expression : 2.9_ex
	Semantic verify correct

expression : 2.9_ex
	Semantic verify correct

for语句验证开始...
for : 2.9_fo

==============目标码模式===============

==============目标码模式命题===============

=================循环交互证明算法===================
用户输入的语义 :

辅助前提 :
P0 = 

推导序列 :
S1 = 		, CI
S2 = 		S1, REDUCE
S3 = 		S2, σ
S4 = 		P0, n = N
S5 = 		S3, S4, CI

check(n == 1) :
目标语义 : 
推导序列证据 : S3
目标语义和推理出的语义是否一致 : true

check(n == N + 1) :
目标语义 : 
推导序列证据 : S5
目标语义和推理出的语义是否一致 : true

综上，给定的目标语义和推理出的语义是否一致 :
true
for语句验证结果 : 验证成功
for语句验证结束!

return : 2.12_re
	Semantic verify correct

functionStatement : 2_fs
	Semantic verify correct

目标码生成结束!
===================Assembler==================

	.section .rodata

	.section ".text"
	.align 2                                         # 2_fs
	.globl main                                      # 2_fs
	.type main, @function                            # 2_fs
main:	                                            # 2_fs
	stwu 1,-32(1)                                    # 2_fs
	mflr 0                                           # 2_fs
	stw 31,28(1)                                     # 2_fs
	stw 0,36(1)                                      # 2_fs
	mr 31,1                                          # 2_fs

	li 0,0                                           # 2.8_as
	stw 0,16(31)                                     # 2.8_as

	li 0,1                                           # 2.9_as
	stw 0,12(31)                                     # 2.9_as

	b .L0                                            # 2.9_fo
.L1:	                                             # 2.9_fo
	lwz 0,12(31)                                     # 2.9.1_ex
	li 9,2                                           # 2.9.1_ex
	divw 11,0,9                                      # 2.9.1_ex
	mullw 9,11,9                                     # 2.9.1_ex
	subf 0,9,0                                       # 2.9.1_ex
	stw 0,36(31)                                     # 2.9.1_ex

	lwz 0,36(31)                                     # 2.9.1_as
	stw 0,20(31)                                     # 2.9.1_as

	lwz 0,20(31)                                     # 2.9.2_ex
	li 9,0                                           # 2.9.2_ex
	cmp 7,0,0,9                                      # 2.9.2_ex
	li 0,0                                           # 2.9.2_ex
	li 9,1                                           # 2.9.2_ex
	isel 0,9,0,30                                    # 2.9.2_ex
	stw 0,36(31)                                     # 2.9.2_ex

	lwz 0,36(31)                                     # 2.9.2_if
	cmpi 7,0,0,0                                     # 2.9.2_if
	beq 7,.L2                                        # 2.9.2_if

	lwz 9,16(31)                                     # 2.9.2.1_ex
	lwz 0,12(31)                                     # 2.9.2.1_ex
	add 0,9,0                                        # 2.9.2.1_ex
	stw 0,36(31)                                     # 2.9.2.1_ex

	lwz 0,36(31)                                     # 2.9.2.1_as
	stw 0,16(31)                                     # 2.9.2.1_as

	b .L3                                            # 2.9.3_el
.L2:	                                             # 2.9.2_if

	lwz 9,12(31)                                     # 2.9.3.1_ex
	li 0,2                                           # 2.9.3.1_ex
	mullw 0,9,0                                      # 2.9.3.1_ex
	stw 0,36(31)                                     # 2.9.3.1_ex

	lwz 9,16(31)                                     # 2.9.3.1_ex
	lwz 0,36(31)                                     # 2.9.3.1_ex
	subf 0,9,0                                       # 2.9.3.1_ex
	stw 0,40(31)                                     # 2.9.3.1_ex

	lwz 0,40(31)                                     # 2.9.3.1_as
	stw 0,16(31)                                     # 2.9.3.1_as

.L3:	                                             # 2.9.3_el

	lwz 0,12(31)                                     # 2.9_ex
	addic 0,0,1                                      # 2.9_ex
	stw 0,12(31)                                     # 2.9_ex

.L0:	                                             # 2.9_fo
	lwz 0,12(31)                                     # 2.9_ex
	lwz 9,8(31)                                      # 2.9_ex
	cmp 7,0,0,9                                      # 2.9_ex
	li 0,1                                           # 2.9_ex
	isel 0,0,0,29                                    # 2.9_ex
	stw 0,36(31)                                     # 2.9_ex

	lwz 0,36(31)                                     # 2.9_fo
	cmpi 7,0,0,0                                     # 2.9_fo
	bne 7,.L1                                        # 2.9_fo

	li 0,0                                           # 2.12_re
	mr 3,0                                           # 2.12_re
	lwz 11,0(1)                                      # 2_fs
	lwz 0,4(11)                                      # 2_fs
	mtlr 0                                           # 2_fs
	lwz 31,-4(11)                                    # 2_fs
	mr 1,11                                          # 2_fs
	blr                                              # 2_fs
	.size main,.-main                                # 2_fs
